#ini untuk membuaut database
CREATE DATABASE sample_database;

#ini untuk menghapus database
DROP DATABASE sample_database;

# PRIMARY KEY membuat identitas atau nilai dari kolom yang diatur menjadi unique
#AUTO INCREMENT membuat id ketika ada data baru dia akan bertambah satu karena dia integer
#contoh
#data pertama dengan id 1, lalu kita membuat record data baru maka data baru akan memiliki id 2 karena menggunakan keyword AUTO INCREMENT

#varchar merupakan tipe data string, saat kita menggunakan varchar kita harus mendefinisikan berapa panjang dari varchar tersebut
#sebagai contoh jika kita membuat varchar dengan panjang 3 maka kita tidak boleh memasukkan huruf atau karakter lebuh dari 3 dan didefinisikan varchar(3)
#dan keyword null merupakan flagging atau tanda bahwa column tersebut tidak boleh kosong

#Naming convension table biasanya menggunakan plural atau jarak sebagai contoh students bukan student
#Naming convension column harus snake_case sebagai contoh student_name

CREATE TABLE students (
  id bigint PRIMARY KEY AUTO_INCREMENT,
  name varchar(191) not null,
  grade integer(191) not null
  );


#kalau values itu kalian bisa melakukan penambahan banyak sekaligus 
#kalau value kalian hanya bisa menambahkan 1 record saja
INSERT INTO student (name, grade) VALUES
('Lia', 'A'),
('amel', 'B');

# * artinya kita memilih semua column untuk ditampilkan
SELECT * FROM students;

# WHERE keyword digunakan sebagai filter
#dalam kasus ini kita ingin mencari students dengan grade B
SELECT * FROM student WHERE grade = 'B';

# * kita ganti menjadinama column/field yang artinya kita ingin menampilkan nama dari students
SELECT name FROM students;

#KALAU KTA TIDAK memasukkan keyword WHERE maka kita akan melakukan update seluruh data 
#jika kita menggunakan where atau kondisi kita akan merubah data yang ingin kita pilih saj
UPDATE students SET grade = 'D' where grade 'C';

#sama dengan update jika kita tidak menggunakan kondisi atau WHERE maka kita akan menghapus semua data
# jika kita ingin menghapus data yang kita pilih gunakan WHERE
DELETE FROM students WHERE id = 1;

CREATE TABLE teachers (
    id bigint PRIMARY KEY AUTO_INCREMENT,
    name varchar(191) not null
);

#column teacher_id pada table classes merupakan foreign key atau penghubung antara table
#teachers and classesdimana 1 kelas itu dimiliki oleh satu guru (one to one) atau 
#1 guru bisa punya banyak kelas (one to many)
#cara mendefinisikan FOREIGN KEY (column) REFERENCES <table> (column) (option)

CREATE TABLE classes (
    id bigint PRIMARY KEY AUTO_INCREMENT,
    teacher_id bigint not null,
    name varchar(191) not null

    CONSTRAINT 
    FOREIGN KEY (teacher_id) REFERENCES teachers (id) ON DELETE CASCADE
);

#di table teacher
INSERT INTO teachers (name) VALUE ('Roy');

# ketika kita mau menambahkan data relational kita perlu tahu dulu id dari parent table 
# dalam kasus ini parent table adalah teacher, dimana kita mau menambahkan kelas terhadap teacher
# dengan nama Roy dimana Roy memiliki 2 kelas yaitu Sistem Informasi dan teknik Informatika

# dalam proses pengambilan data dari 2 atau lebih table kita perlu melakukan pemanggilan 
# column dengan nama <table>.<column>. Jika data yang ingin kita tampilkan kita ganyi nama,
# column gunakan AS sebagai alias atau pengganti sementara dari nama column
# dalam kasus ini kita mencoba mengambil data dari table classes dan ingin mengambil data 
#guru berdasarkan column teacher_idyang berada di table classes dengan menggunakan iner join 
#dimana inner join membutuhkan foreign key sebagai kunci asing atau sebagai izin untuh
# mengakses tabke yang kita mau dalam hal ini table teachers yang akan kita ambil data nya
SELECT
    classes.name as nama_kelas,
    teachers.name as nama_guru
FROM classes
INNER JOIN teacher on classes.teacher_id = teachers.id

#kata kunci database
DROP TABLE students; 

ALTER TABLE students
ADD COLUMN <NAME> <TYPE> <RULES>,
ADD <>

# untuk menampilkan data 
SELECT
    students.name as nama_mahasiswa,
    classes.name as nama_kelas
FROM students
INNER JOIN classes on students.class_id = classes.id

# many-to-many perlu yang namanya pivot table atau table perantara untuk menghubungkannya
CREATE TABLE student_has_teachers (
    student_id bigint not null,
    teacher_id bigint not null

    CONSTRAINT 
        FOREIGN KEY (student_id) REFERENCES student (id) ON DELETE CASCADE,
    CONSTRAINT 
        FOREIGN KEY (teacher_id) REFERENCES teachers (id) ON DELETE CASCADE

);

INSERT INTO teachers (name) VALUES ('Dony');
INSERT INTO students (class_id, name, grade) VALUES
(1, 'Raymona', 'B'),
(2, 'Gusna', 'C');

INSERT INTO classes (teacher_id, name) VALUES
(2, 'Ilmu Antropologi');

INSERT INTO student_has_teachers (teacher_id, 'student_id') VALUES 
('1', '3'),
('2', '4'),
('1', '5'),
('2', '6');

SELECT
    students.name as nama_mahasiswa,
    teachers.name as nama_guru
    classes.name as nama_kelas
FROM teachers
INNER JOIN classes on teachers.class_id = classes.id


